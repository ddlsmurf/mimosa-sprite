"use strict";

var path = require( 'path' ),
    fs = require( 'fs' );

exports.defaults = function() {
  return {
    spritesmith: {
      inDir: "images/sprite",
      outDir: "images",
      commonDir: "common",
      stylesheetOutDir: "stylesheets/sprite",
      isCSS: false,
      isStylus: true,
      options: {
        json2css: {
          formatOpts : {}
        }
      }
    }
  };
};

exports.placeholder = function () {
   var ph = "  # spritesmith:                     #\n" +
      "    # inDir: \"images/sprite\" # Folder inside which are the images to be sprited. Every folder\n" +
      "                                # at the root of this folder will generate a single sprite. This\n" +
      "                                # path is relative to watch.sourceDir, which defaults to 'assets'\n" +
      "    # outDir: \"images\"     # Where to place generated sprites relative to watch.sourceDir\n" +
      "                                # Placing the output images outside the sprite directory makes it\n" +
      "                                # easy to exclude the sprite directory from being copied to \n" +
      "                                # watch.compiledDir.\n" +
      "    # commonDir: \"common\"       # Folder inside which are images to be included in every sprite\n" +
      "                                # This is a string path relative to inDir.\n" +
      "    # stylesheetOutDir: \"stylesheets/sprite\"  # Where to place the output stylesheets. Path is relative\n" +
      "                                # to watch.sourceDir\n" +
      "    # options: {}               # Pass through options for node-sprite-generator, the tool this\n" +
      "                                # module uses under the hood to do the heavy lifting. Details on\n" +
      "                                # the available options can be found here:\n" +
      "                                # https://github.com/selaux/node-sprite-generator#options\n" +
      "                                # mimosa-sprite provides the values for 'src', 'spritePath'\n" +
      "                                # and 'stylesheetPath' based on the inDir folders structure.\n" +
      "                                # Other config options can be placed in this 'options' object.\n" +
      "                                # For more control, 'options' can be a function that takes the\n" +
      "                                # inferred config generated by mimosa-sprite. If you are\n" +
      "                                # generating 10 sprites, the options function will be called\n" +
      "                                # 10 times for each sprite, giving you the chance to make\n" +
      "                                # specific modifications to the node-sprite-generator config.\n\n";
  return ph;
};

exports.validate = function ( config, validators ) {
  var errors = [];
  if ( validators.ifExistsIsObject( errors, "spritesmith config", config.spritesmith ) ) {
    if ( validators.ifExistsIsString( errors, "spritesmith.inDir", config.spritesmith.inDir ) ) {
      config.spritesmith.inDirFull = path.join( config.watch.sourceDir, config.spritesmith.inDir );

      if ( validators.ifExistsIsString( errors, "spritesmith.commonDir", config.spritesmith.commonDir ) ) {
        config.spritesmith.commonDirFull = path.join( config.spritesmith.inDirFull, config.spritesmith.commonDir );

        // If it doesnt exist, nuke it
        if ( !fs.existsSync( config.spritesmith.commonDirFull ) ) {
          config.spritesmith.commonDirFull = null;
        }
      }
    }

    if ( validators.ifExistsIsString( errors, "spritesmith.outDir", config.spritesmith.outDir ) ) {
      config.spritesmith.outDirFull = path.join( config.watch.sourceDir, config.spritesmith.outDir );
    }

    if ( validators.ifExistsIsString( errors, "spritesmith.stylesheetOutDir", config.spritesmith.stylesheetOutDir ) ) {
      config.spritesmith.stylesheetOutDirFull = path.join( config.watch.sourceDir, config.spritesmith.stylesheetOutDir );
    }

    var o = config.spritesmith.options;
    if ( ( typeof o === "object" && !Array.isArray( o ) ) || ( typeof o === "function" )) {
      if ( o.stylesheet && o.stylesheet === "css" ) {
        config.spritesmith.isCSS = true;
        config.spritesmith.isStylus = false;
      }
    } else {
      errors.push( "spritesmith.options must be an object or a function" );
    }

  }

  return errors;
};